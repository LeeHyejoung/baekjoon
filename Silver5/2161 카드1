#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define MAX_QUEUE_SIZE 2000

typedef int element;

typedef struct {
	element data[MAX_QUEUE_SIZE];
	int front, rear;
} QueueType;

void init(QueueType* q) {
	q->front = q->rear = 0;

	return;
}

int is_empty(QueueType* q) {
	return (q->front == q->rear);
}

int is_full(QueueType* q) {
	return (q->front == (q->rear + 1) % MAX_QUEUE_SIZE);
}

void enqueue(QueueType* q, element item) {
	if (is_full(q)) {
		return;
	}
	else {
		q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
		q->data[q->rear] = item;
	}

	return;
}

element dequeue(QueueType* q) {
	if (is_empty(q)) {
		return;
	}
	else {
		q->front = (q->front + 1) % MAX_QUEUE_SIZE;

		return (q->data[q->front]);
	}
}

element peek(QueueType* q) {
	if (is_empty(q)) {
		return;
	}
	else {
		return (q->data[(q->front) % MAX_QUEUE_SIZE]);
	}
}

int getCount(QueueType* q) {
	return ((q->rear - q->front + MAX_QUEUE_SIZE) % MAX_QUEUE_SIZE);
}

int main(void)
{
	QueueType q;
	int n, i;
	element returnValue;

	init(&q);

	scanf("%d", &n);

	for (i = 0; i < n; i++) {
		enqueue(&q, i + 1);
	}

	while (getCount(&q) > 1) {
		returnValue = dequeue(&q);
		printf("%d ", returnValue);

		returnValue = dequeue(&q);
		enqueue(&q, returnValue);
	}

	printf("%d\n", dequeue(&q));

	return 0;
}
